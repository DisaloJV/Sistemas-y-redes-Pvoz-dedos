from socketIO_client import SocketIO
import cv2
import mediapipe as mp

# Configuraci√≥n del servidor
IP_SERVER = '192.168.100.161'
PORT = 3000
socketIO = SocketIO(IP_SERVER, PORT)
print("‚úÖ Conectado al servidor Socket.IO")

# Inicializar MediaPipe Hands
mp_hands = mp.solutions.hands
hands = mp_hands.Hands(
    static_image_mode=False,
    max_num_hands=1,
    min_detection_confidence=0.7,
    min_tracking_confidence=0.7
)
mp_drawing = mp.solutions.drawing_utils

# Funci√≥n para saber qu√© dedos est√°n levantados
def detectar_dedos_levantados(landmarks):
    dedos = []
    tips = [8, 12, 16, 20]
    for tip in tips:
        if landmarks[tip].y < landmarks[tip - 2].y:
            dedos.append(1)
        else:
            dedos.append(0)
    return dedos

# Variables para evitar env√≠o innecesario
estado_anterior = [None, None, None, None]
estado_any_anterior = None

# Captura de c√°mara
cap = cv2.VideoCapture(0)

print("üì∑ C√°mara iniciada. Presiona ESC para salir.")
while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    result = hands.process(rgb)

    dedos_actuales = [0, 0, 0, 0]  # Default

    if result.multi_hand_landmarks:
        for hand_landmarks in result.multi_hand_landmarks:
            mp_drawing.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)
            dedos_actuales = detectar_dedos_levantados(hand_landmarks.landmark)

    # Enviar datos solo si cambia el estado
    for i in range(4):
        if estado_anterior[i] != dedos_actuales[i]:
            estado_anterior[i] = dedos_actuales[i]
            dedo_id = f"D{i+1}"
            estado = "ON" if dedos_actuales[i] else "OFF"
            socketIO.emit("desde_cliente", f"{dedo_id}:{estado}")
            print(f"{dedo_id}:{estado}")

    # LED integrado si hay al menos un dedo levantado
    any_on = any(dedos_actuales)
    if estado_any_anterior != any_on:
        estado_any_anterior = any_on
        socketIO.emit("desde_cliente", "ANY:ON" if any_on else "ANY:OFF")

    # Mostrar en pantalla
    for i, estado in enumerate(dedos_actuales):
        color = (0, 255, 0) if estado else (0, 0, 255)
        texto = f"Dedo {i+1}: {'ON' if estado else 'OFF'}"
        cv2.putText(frame, texto, (10, 30 + i*25), cv2.FONT_HERSHEY_SIMPLEX, 0.7, color, 2)

    cv2.imshow("Detecci√≥n de Dedos", frame)
    if cv2.waitKey(1) & 0xFF == 27:
        break

cap.release()
cv2.destroyAllWindows()
socketIO.disconnect()
print("üõë Conexi√≥n cerrada.")
